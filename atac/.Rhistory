setwd("../rap/")
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
.libPaths("C:/Program Files/R/R-4.2.3/library")
library(doParallel)
# library(BiocParallel)
library(dplyr)
library(ggplot2)
library(stringr)
library(sva)
library(ggpubr)
library(rstatix)
library(data.table)
library(tidyr)
timeNow<-function(x=NULL, y=NULL, m=NULL, d=NULL , h=NULL, min=NULL,ymd_h_m=NULL){x=date();
date=unlist(str_split(pattern = "-", Sys.Date()))
time=unlist(str_split(pattern = ":",unlist(str_split(pattern=" ",Sys.time()))[2]))
return(paste(c(date,time), collapse = "_"))
}
cl <- makeCluster(10)  # Use 10 cores
registerDoParallel(cl)
sample_annot_rap=read.csv("sample_annot_rap.csv", header=T)
rownames(sample_annot_rap)=sample_annot_rap$Sample_ID
sample_annot_rap$cellType=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('PXGL|Primed',x)]}))
sample_annot_rap$mark=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('Input|RAP',x)]}))
sample_annot_rap$replicate=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('Rep',x)]}))
sample_annot_rap$target=sample_annot_rap$mark
sample_annot_rap$target[sample_annot_rap$target!='Input']='target'
bed_files=list.files(path = 'bed/',pattern='regions')
bed_list_chrX=NULL
for(bed in bed_files){
sample=sub('\\.regions.*','',bed)
bed_list_chrX[[sample]]=as.data.frame(fread(file = paste0('bed/',bed), header = F))
colnames(bed_list_chrX[[sample]])=c('chr','start','end',sample)
bed_list_chrX[[sample]]=bed_list_chrX[[sample]][!grepl('_',bed_list_chrX[[sample]]$chr),]
bed_list_chrX[[sample]]=bed_list_chrX[[sample]][bed_list_chrX[[sample]]$chr=="chrX",]
bed_list_chrX[[sample]]$feature=paste(sep="_",bed_list_chrX[[sample]]$chr,bed_list_chrX[[sample]]$start,bed_list_chrX[[sample]]$end)
bed_list_chrX[[sample]]=bed_list_chrX[[sample]][,c(5,4)]
rownames(bed_list_chrX[[sample]])=bed_list_chrX[[sample]]$feature
bed_list_chrX[[sample]]$feature=NULL
}
bed_list_chrX=bed_list_chrX[rn(sample_annot_rap)]
bed_list_chrX_df=do.call('cbind',bed_list_chrX)
bed_list_chrX_df=bed_list_chrX_df[,rn(sample_annot_rap)]
colnames(bed_list_chrX_df)=sample_annot_rap$Sample_Name
colorScale<-colorRamp2(quantile(cor(log2(bed_list_chrX_df+1)),probs=c(0.05,0.5,0.95)),c("#00008B","white","red"))
htPearson=Heatmap(cor(log2(bed_list_chrX_df+1)),
col = colorScale,clustering_method_columns = "ward.D2",clustering_method_rows = "ward.D2",
show_row_names = T,show_column_names = T,row_names_gp = autoGparFontSizeMatrix(nrow(cor(log2(bed_list_chrX_df+1)))),
name = "Pearson\ncorrelation", column_title = "Pearson correlation heatmap\nRAP-XIST\nchrX")
#pdf("pearson_correlation_heatmap_rap_xist_chrX_all_bins.pdf",width = 20,height = 20)
htPearson
# dev.off()
bed_chrX_naive_mark_list=lapply(bed_chrX_naive_mark_list,function(x){
bed_chrX %>%
tidyr::pivot_wider(names_from = sample, values_from = coverage) %>%
as.data.frame() -> x
})
setwd("../rap/")
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
.libPaths("C:/Program Files/R/R-4.2.3/library")
library(doParallel)
# library(BiocParallel)
library(dplyr)
library(ggplot2)
library(stringr)
library(sva)
library(ggpubr)
library(rstatix)
library(data.table)
library(tidyr)
timeNow<-function(x=NULL, y=NULL, m=NULL, d=NULL , h=NULL, min=NULL,ymd_h_m=NULL){x=date();
date=unlist(str_split(pattern = "-", Sys.Date()))
time=unlist(str_split(pattern = ":",unlist(str_split(pattern=" ",Sys.time()))[2]))
return(paste(c(date,time), collapse = "_"))
}
cl <- makeCluster(10)  # Use 10 cores
registerDoParallel(cl)
sample_annot_rap=read.csv("sample_annot_rap.csv", header=T)
rownames(sample_annot_rap)=sample_annot_rap$Sample_ID
sample_annot_rap$cellType=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('PXGL|Primed',x)]}))
sample_annot_rap$mark=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('Input|RAP',x)]}))
sample_annot_rap$replicate=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('Rep',x)]}))
sample_annot_rap$target=sample_annot_rap$mark
sample_annot_rap$target[sample_annot_rap$target!='Input']='target'
bed_files=list.files(path = 'bed/',pattern='regions')
bed_list_chrX=NULL
for(bed in bed_files){
sample=sub('\\.regions.*','',bed)
bed_list_chrX[[sample]]=as.data.frame(fread(file = paste0('bed/',bed), header = F))
colnames(bed_list_chrX[[sample]])=c('chr','start','end',sample)
bed_list_chrX[[sample]]=bed_list_chrX[[sample]][!grepl('_',bed_list_chrX[[sample]]$chr),]
bed_list_chrX[[sample]]=bed_list_chrX[[sample]][bed_list_chrX[[sample]]$chr=="chrX",]
bed_list_chrX[[sample]]$feature=paste(sep="_",bed_list_chrX[[sample]]$chr,bed_list_chrX[[sample]]$start,bed_list_chrX[[sample]]$end)
bed_list_chrX[[sample]]=bed_list_chrX[[sample]][,c(5,4)]
rownames(bed_list_chrX[[sample]])=bed_list_chrX[[sample]]$feature
bed_list_chrX[[sample]]$feature=NULL
}
bed_list_chrX=bed_list_chrX[rn(sample_annot_rap)]
bed_list_chrX_df=do.call('cbind',bed_list_chrX)
bed_list_chrX_df=bed_list_chrX_df[,rn(sample_annot_rap)]
colnames(bed_list_chrX_df)=sample_annot_rap$Sample_Name
colorScale<-colorRamp2(quantile(cor(log2(bed_list_chrX_df+1)),probs=c(0.05,0.5,0.95)),c("#00008B","white","red"))
htPearson=Heatmap(cor(log2(bed_list_chrX_df+1)),
col = colorScale,clustering_method_columns = "ward.D2",clustering_method_rows = "ward.D2",
show_row_names = T,show_column_names = T,row_names_gp = autoGparFontSizeMatrix(nrow(cor(log2(bed_list_chrX_df+1)))),
name = "Pearson\ncorrelation", column_title = "Pearson correlation heatmap\nRAP-XIST\nchrX")
#pdf("pearson_correlation_heatmap_rap_xist_chrX_all_bins.pdf",width = 20,height = 20)
htPearson
# dev.off()
#pdf("pearson_correlation_heatmap_rap_xist_chrX_all_bins.pdf",width = 20,height = 20)
htPearson
#pdf("pearson_correlation_heatmap_rap_xist_chrX_all_bins.pdf",width = 20,height = 20)
htPearson
bed_chrX$cellType=bed_chrX$sample
setwd("../rap/")
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
.libPaths("C:/Program Files/R/R-4.2.3/library")
library(doParallel)
# library(BiocParallel)
library(dplyr)
library(ggplot2)
library(stringr)
library(sva)
library(ggpubr)
library(rstatix)
library(data.table)
library(tidyr)
timeNow<-function(x=NULL, y=NULL, m=NULL, d=NULL , h=NULL, min=NULL,ymd_h_m=NULL){x=date();
date=unlist(str_split(pattern = "-", Sys.Date()))
time=unlist(str_split(pattern = ":",unlist(str_split(pattern=" ",Sys.time()))[2]))
return(paste(c(date,time), collapse = "_"))
}
cl <- makeCluster(10)  # Use 10 cores
registerDoParallel(cl)
sample_annot_rap=read.csv("sample_annot_rap.csv", header=T)
rownames(sample_annot_rap)=sample_annot_rap$Sample_ID
sample_annot_rap$cellType=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('PXGL|Primed',x)]}))
sample_annot_rap$mark=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('Input|RAP',x)]}))
sample_annot_rap$replicate=unlist(lapply(str_split(sample_annot_rap$Sample_Name,pattern="_"),function(x){x[grep('Rep',x)]}))
sample_annot_rap$target=sample_annot_rap$mark
sample_annot_rap$target[sample_annot_rap$target!='Input']='target'
bed_files=list.files(path = 'bed/',pattern='regions')
bed_list=NULL
for(bed in bed_files){
sample=sub('\\.regions.*','',bed)
bed_list[[sample]]=as.data.frame(fread(file = paste0('bed/',bed), header = F))
colnames(bed_list[[sample]])=c('chr','start','end',sample)
bed_list[[sample]]=bed_list[[sample]][!grepl('_',bed_list[[sample]]$chr),]
bed_list[[sample]][,sample]=(bed_list[[sample]][,sample])/sum((bed_list[[sample]][,sample]))*1e6
}
bed_list=bed_list[rn(sample_annot_rap)]
bed_list=lapply(bed_list,function(x){
x %>%
tidyr::pivot_longer(!c(chr,start,end), names_to = "sample", values_to = "count") -> x
return(x)
})
bed_all=do.call('rbind',bed_list)
# all(unique(bed_all$sample)==rn(sample_annot_rap))
bed_all$cellType=bed_all$sample
bed_all$mark=bed_all$sample
bed_all$replicate=bed_all$sample
bed_all$target=bed_all$sample
foreach(x=rn(sample_annot_rap)) %do% {
bed_all$cellType[bed_all$cellType==x]<-sample_annot_rap[x,'cellType']
bed_all$mark[bed_all$mark==x]<-sample_annot_rap[x,'mark']
bed_all$replicate[bed_all$replicate==x]<-sample_annot_rap[x,'replicate']
bed_all$target[bed_all$target==x]<-sample_annot_rap[x,'target']
}
# save(bed_all,file="bed_all.Rdata") # takes ~ 10 min
# load("bed_all.Rdata")
bed_all_fc=bed_all
bed_all_fc %>%
group_by(mark) %>%
group_split() ->bed_all_fc
names(bed_all_fc)=unlist(lapply(bed_all_fc,function(x){unique(x$mark)}))
marks=names(bed_all_fc)[names(bed_all_fc)!='Input']
bed_all_fc_thres=NULL
for(i in c(10)){
bed_all_fc_thres<-foreach(x=names(bed_all_fc)[names(bed_all_fc)!='Input']) %do% { # takes ~15 min
# bed_all_fc[[x]] %>%
#   group_by(cellType,replicate) %>%
#   filter(count>exp(mean(log(count+0.01)))) -> bed_all_fc[[x]] #geom_mean
bed_all_fc_Input=rbind(bed_all_fc[[x]],bed_all_fc[['Input']])
bed_all_fc_Input %>%
group_by(cellType,replicate,chr,start) %>%
filter(n()>1) -> bed_all_fc_Input # select common bins to target and Inputs
bed_all_fc_Input %>%
group_by(cellType,replicate) %>%
summarise(geom_mean=exp(mean(log(count[mark != "Input"]+0.01))))
bed_all_fc_Input %>%
group_by(cellType,replicate) %>%
summarise(chr = chr[mark != "Input"],start = start[mark != "Input"],end = end[mark != "Input"], fc = (count[mark != "Input"]+0.01) / (count[mark == "Input"]+0.01)) %>%
filter(fc>=i) -> x_fc # avoid /0 ratio ; thres 5 OK
x_fc$mark=rep(x,nrow(x_fc))
bed_all_fc_Input=NULL
return(x_fc)
}
# save(bed_all_fc,file="bed_all_fc.RData")
# load("bed_all_fc.RData")
bed_mark=do.call('rbind',bed_all_fc_thres)
chrom_sizes=read.table("hg38.chrom.sizes",header = F)
colnames(chrom_sizes)=c("chr","size")
rownames(chrom_sizes)=chrom_sizes$chr
bed_mark%>%
group_by(chr)%>%
group_split() -> bed_mark
bed_mark=lapply(bed_mark,function(x){
x$size=rep(chrom_sizes[unique(x$chr),'size'],nrow(x))
return(x)})
bed_mark_df=do.call('rbind',bed_mark)
bed_mark_df %>%
group_by(mark) %>%
group_split() -> bed_mark_list
names(bed_mark_list)=unlist(lapply(bed_mark_list,function(x){unique(x$mark)}))
# compute % coverage per chr and plot
for(mark in names(bed_mark_list)){
x=bed_mark_list[[mark]]
naive=x[x$cellType=="PXGL",]
primed=x[x$cellType=="Primed",]
naive%>%
group_by(chr,start) %>%
filter(n()>1) %>%
filter(row_number()==1) %>%
summarise(chr=unique(chr),start=unique(start),end=unique(end)) %>%
arrange(factor(chr, levels=c(paste0(rep("chr",22),seq(22)),'chrX','chrY','chrM'))) -> naive # select common peaks across replicates
primed%>%
group_by(chr,start) %>%
filter(n()>1) %>%
filter(row_number()==1) %>%
summarise(chr=unique(chr),start=unique(start),end=unique(end)) %>%
arrange(factor(chr, levels=c(paste0(rep("chr",22),seq(22)),'chrX','chrY','chrM'))) -> primed
# write.tsv(naive, file=paste(sep="_",mark,'fc',i,"PXGL_RAP.bed"),row.names = F,col.names = F,  eol = "\n")
# write.tsv(primed, file=paste(sep="_",mark,'fc',i,"Primed_RAP.bed"),row.names = F,col.names = F,  eol = "\n")
x %>%
group_by(cellType,replicate,chr) %>%
summarise(coverage_percent=unique(n()*10000/size*100)) %>%
filter(!(chr%in%c('chrM','chrY'))) -> x # NB: chrY neglictable, likely alignment errors
x %>%
group_by(cellType,chr) %>%
mutate(sd=sd(coverage_percent), mean=mean(coverage_percent)) -> x
x %>%
group_by(cellType) %>%
mutate(median=median(coverage_percent)) -> x
x$chr=factor(x$chr,levels=c(paste0(rep("chr",22),seq(22)),'chrX'))
print(ggplot(x,aes(x=chr,y=coverage_percent,fill=cellType))+
geom_bar(stat = 'summary',position = "dodge")+
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), position="dodge")+
ggtitle(mark) +
ylab('% occupancy')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
geom_hline(yintercept = unique(x$median)[1], color='#00BFC4',linetype='dashed',size=0.75)+
geom_hline(yintercept = unique(x$median)[2], color='#F8766D',linetype='dashed',size=0.75)+
theme(axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, linetype = 'dashed',colour = "grey"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
)
# ggsave(paste0(mark,'_fc_',i,'_coverage_occupancy_rap_flip_back.pdf'))
dev.off()
}
}
print(ggplot(x,aes(x=chr,y=coverage_percent,fill=cellType))+
geom_bar(stat = 'summary',position = "dodge")+
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), position="dodge")+
ggtitle(mark) +
ylab('% occupancy')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
geom_hline(yintercept = unique(x$median)[1], color='#00BFC4',linetype='dashed',size=0.75)+
geom_hline(yintercept = unique(x$median)[2], color='#F8766D',linetype='dashed',size=0.75)+
theme(axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, linetype = 'dashed',colour = "grey"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())
)
setwd("../atac/")
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
.libPaths("C:/Program Files/R/R-4.2.3/library")
library(doParallel)
# library(BiocParallel)
library(dplyr)
library(ggplot2)
library(stringr)
library(sva)
library(ggpubr)
library(rstatix)
library(data.table)
library(tidyr)
timeNow<-function(x=NULL, y=NULL, m=NULL, d=NULL , h=NULL, min=NULL,ymd_h_m=NULL){x=date();
date=unlist(str_split(pattern = "-", Sys.Date()))
time=unlist(str_split(pattern = ":",unlist(str_split(pattern=" ",Sys.time()))[2]))
return(paste(c(date,time), collapse = "_"))
}
constant=read.table("compute_matrices_for_boxplot/constant.gtf", header=F, sep="\t")
colnames(constant)=c('chrom','source','feature','start',
'end',
'score',
'strand',
'frame',
'attribute')
constant$category=rep("constant",nrow(constant))
up=read.table("compute_matrices_for_boxplot/up.gtf", header=F, sep="\t")
colnames(up)=c('chrom','source','feature','start',
'end',
'score',
'strand',
'frame',
'attribute')
up$category=rep("up",nrow(up))
transcripts_gtf=rbind(constant,up)
transcripts_gtf %>%
filter(feature=="transcript") -> transcripts_gtf
transcripts_gtf$transcript=sub(".*transcript_id ","",unlist(lapply(str_split(pattern=";",transcripts_gtf$attribute),function(x){x[grep("transcript_id",x)]})))
matrices=list.files(path = 'matrices_boxplot/',pattern='.matrix.gz')
names(matrices)=sub("_up.*","",matrices)
matrices=as.list(matrices)
df_list=lapply(matrices,function(x){
df=fread(file = paste0('matrices_boxplot/',x),data.table = F)
rownames(df)=df$V4
df=df[,7:ncol(df)]
naive_ctl_1=rowSums(df[,1:200])
naive_ctl_2=rowSums(df[,201:400])
naive_ctl_3=rowSums(df[,401:600])
naive_ttt_1=rowSums(df[,601:800])
naive_ttt_2=rowSums(df[,801:1000])
naive_ttt_3=rowSums(df[,1001:1200])
ctl_df=data.frame(naive_ctl_1,naive_ctl_2,naive_ctl_3)
ttt_df=data.frame(naive_ttt_1,naive_ttt_2,naive_ttt_3)
return(data.frame(ctl=rowMeans(ctl_df),ttt=rowMeans(ttt_df)))
})
# all(rn(df)==transcripts_gtf$transcript)
df=do.call('cbind',df_list)
df$gene=rn(df)
df$category=transcripts_gtf$category
df%>%
tidyr::pivot_longer(!c(gene,category), names_to = "sample", values_to = "norm_count") -> df
df$condition=df$sample
df$condition=sub(".*\\.","",df$condition)
df %>%
filter(condition=="ctl") %>%
ggplot() +
geom_boxplot(aes(x=category, y=norm_count, fill=category),lwd=0.15,position=position_dodge(width = 0.8), outlier.stroke = 0, outlier.size = 0)+
# geom_point(aes(x=category, y=norm_count, fill=condition),size=0.25,position=position_jitterdodge(jitter.width=0,dodge.width=0.8),alpha=0.8)+
theme_bw()+
theme(strip.text.x = element_text( face = "bold.italic", size = 10))+
guides(fill=guide_legend(ncol=1)) +
theme(axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, linetype = 'dashed',colour = "grey"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())+
# stat_boxplot(aes(x=category, y=tpm),geom='errorbar', linetype=1, width=0.8, size=0.25)+
stat_compare_means(aes(x=category, y=norm_count, group=category),vjust=0.1,label="p.signif",size=3, method="t.test", paired=FALSE) +
ggtitle("ATAC-Seq XIST sensitive/unsensitive gene categories\nin WT naive - TSS 5kb")
# ggsave("atac_seq_gene_categories_in_wt_naive_tss_5kb.pdf",width=5,height=7)
df %>%
ggplot() +
geom_boxplot(aes(x=category, y=norm_count, fill=condition),lwd=0.15,position=position_dodge(width = 0.8), outlier.stroke = 0, outlier.size = 0)+
# geom_point(aes(x=category, y=norm_count, fill=condition),size=0.25,position=position_jitterdodge(jitter.width=0,dodge.width=0.8),alpha=0.8)+
theme_bw()+
theme(strip.text.x = element_text( face = "bold.italic", size = 10))+
guides(fill=guide_legend(ncol=1)) +
theme(axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, linetype = 'dashed',colour = "grey"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())+
# stat_boxplot(aes(x=category, y=tpm),geom='errorbar', linetype=1, width=0.8, size=0.25)+
stat_compare_means(aes(x=category, y=norm_count, group=condition),vjust=0.1,label="p.signif",size=3, method="t.test", paired=FALSE) +
ggtitle("ATAC-Seq XIST sensitive/unsensitive gene categories\nNaive ctl vs ttt - TSS 5kb")
# ggsave("atac_seq_gene_categories_naive_ctl_ttt_tss_5kb.pdf",width=5,height=7)
setwd('../atac/')
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
# .libPaths(c("/shared/projects/xci/r_packages/","/shared/software/conda/envs/r-4.1.1/lib/R/library/"))
# BiocManager::install('EnhancedVolcano')
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(SingleCellExperiment)
library(Matrix)
gc()
setwd('../atac/')
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
# .libPaths(c("/shared/projects/xci/r_packages/","/shared/software/conda/envs/r-4.1.1/lib/R/library/"))
# BiocManager::install('EnhancedVolcano')
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(Matrix)
setwd('../atac/')
source("https://gitlab.univ-nantes.fr/E114424Z/veneR/-/raw/master/loadFun.R")
# .libPaths(c("/shared/projects/xci/r_packages/","/shared/software/conda/envs/r-4.1.1/lib/R/library/"))
# BiocManager::install('EnhancedVolcano')
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(Matrix)
library(stringr)
library(BiocManager)
library(devtools)
library(pcaMethods)
library(data.table)
library(parallel)
library(DESeq2)
library(ggpubr)
library(tidyverse)
library(EnhancedVolcano)
BiocManager::install('EnhancedVolcano')
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(Matrix)
library(stringr)
library(BiocManager)
library(devtools)
library(pcaMethods)
library(data.table)
library(parallel)
library(DESeq2)
library(ggpubr)
library(tidyverse)
library(EnhancedVolcano)
library(rstatix)
bi_bi_up=read.table("bi_bi_up.gtf", header=F, sep="\t")
colnames(bi_bi_up)=c('chrom','source','feature','start',
'end',
'score',
'strand',
'frame',
'attribute')
mono_bi_up=read.table("mono_bi_up.gtf", header=F, sep="\t")
colnames(mono_bi_up)=c('chrom','source','feature','start',
'end',
'score',
'strand',
'frame',
'attribute')
bi_bi=read.table("bi_bi.gtf", header=F, sep="\t")
colnames(bi_bi)=c('chrom','source','feature','start',
'end',
'score',
'strand',
'frame',
'attribute')
up_gtf=rbind(bi_bi_up,
mono_bi_up) # I checked, these genes are common to wt-ko/ctl-ttt, cf file: C:\Users\gael\charbel_paper\rna\charbel_paper_ifb\C:/Users/gael/charbel_paper/rna/charbel_paper_ifb/embryo_pseudobulk\charbel_petro_zhou_v2.r
constant_gtf=bi_bi # I checked, these genes are common to wt-ko/ctl-ttt, cf file: C:\Users\gael\charbel_paper\rna\charbel_paper_ifb\C:/Users/gael/charbel_paper/rna/charbel_paper_ifb/embryo_pseudobulk\charbel_petro_zhou_v2.r
up_gtf%>%
filter(feature=="gene")->up_gtf
up_gtf$chrom[up_gtf$chrom=="X"]="chrX"
up_gtf$category=rep('up',nrow(up_gtf))
up_gtf$gene=sub('.*gene_name ','',unlist(lapply(str_split(pattern=";",up_gtf$attribute),function(x){x[grep('gene_name',x)]})))
constant_gtf%>%
filter(feature=="gene")->constant_gtf
constant_gtf$chrom[constant_gtf$chrom=="X"]="chrX"
constant_gtf$category=rep('constant',nrow(constant_gtf))
constant_gtf$gene=sub('.*gene_name ','',unlist(lapply(str_split(pattern=";",constant_gtf$attribute),function(x){x[grep('gene_name',x)]})))
gene_list=c(up_gtf$gene,constant_gtf$gene)
raw_count_files=list.files(path = 'raw_counts_htseq/',pattern = "_raw_counts.txt")
mmat=NULL
for (i in seq(length(raw_count_files))){
mmat[[i]]=read.table(paste0('raw_counts_htseq/',raw_count_files[i]))
colnames(mmat[[i]])=c("gene",sub("_raw.*","",raw_count_files[i]))
rownames(mmat[[i]])=mmat[[i]]$gene
mmat[[i]]$gene=NULL
}
mmat_df=do.call("cbind", mmat)
mmat_mtx_cpm=CPM(as.matrix(mmat_df))
mmat_mtx_cpm_subset=mmat_mtx_cpm[gene_list,]
# all(rn(mmat_mtx_cpm_subset)==gene_list)
mmat_mtx_cpm_subset=as.data.frame(mmat_mtx_cpm_subset)
mmat_mtx_cpm_subset$gene=rn(mmat_mtx_cpm_subset)
mmat_mtx_cpm_subset$category=c(rep('up',length(up_gtf$gene)),rep('constant',length(constant_gtf$gene)))
mmat_mtx_cpm_subset%>%
tidyr::pivot_longer(!c(gene,category), names_to = "sample", values_to = "norm_counts") -> mmat_mtx_cpm_subset_tibble
mmat_mtx_cpm_subset_tibble$condition=sapply(str_split(mmat_mtx_cpm_subset_tibble$sample,pattern = "_"),function(x) x[2])
mmat_mtx_cpm_subset_tibble$condition[mmat_mtx_cpm_subset_tibble$condition!="DOX"]<-"CTL"
mmat_mtx_cpm_subset_tibble %>%
filter(condition=="CTL") %>%
ggplot() +
geom_boxplot(aes(x=category, y=norm_counts, fill=category),lwd=0.15,position=position_dodge(width = 0.8), outlier.stroke = 0, outlier.size = 0)+
# geom_point(aes(x=category, y=norm_counts, fill=condition),size=0.25,position=position_jitterdodge(jitter.width=0,dodge.width=0.8),alpha=0.8)+
theme_bw()+
theme(strip.text.x = element_text( face = "bold.italic", size = 10))+
guides(fill=guide_legend(ncol=1)) +
theme(axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, linetype = 'dashed',colour = "grey"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())+
# stat_boxplot(aes(x=category, y=tpm),geom='errorbar', linetype=1, width=0.8, size=0.25)+
stat_compare_means(aes(x=category, y=norm_counts, group=category),vjust=0.1,label="p.signif",size=3, method="t.test", paired=FALSE) +
ggtitle("ATAC-Seq XIST sensitive/unsensitive gene categories\nin WT naive")
# ggsave("atac_seq_gene_categories_in_wt_naive.pdf",width=5,height=7)
